package com.university.service;

import java.sql.Date;
import java.util.List;

import com.university.entities.Application;
import com.university.entities.ProgramsOffered;
import com.university.entities.ProgramsScheduled;
import com.university.exception.UniversityException;

public interface IUniversityService {

	/**
	 * Call DAO to get the list of active ProgramScheduled
	 * @return List of ProgramScheduled
	 * @throws UniversityException
	 */
	public List<ProgramsScheduled> getProgrammes() throws UniversityException;


	/**get Status of application sent by the participant 
	 * this is generated by the input of respective committee
	 * @param app_id
	 * @return Confirm or rejected
	 * @throws UniversityException
	 */
	public String getStatus(int app_id) throws UniversityException;

	/**Insert the application into the database which is filled
	 * by the participant for a program
	 * @param applicant
	 * @return 0 if success 1 if not inserted in database
	 * @throws UniversityException
	 */
	public int submit(Application applicant) throws UniversityException;
	
	/**Get the List of application for a particular program id
	 * can be accessed by admin or committee
	 * @param pId
	 * @return
	 * @throws UniversityException
	 */
	public List<Application> getApplications(String pId) throws UniversityException;

	/**
	 * Validate the login credential from the available credential
	 * @param loginId
	 * @param pwd
	 * @param role
	 * @return 0 if valid 1 if invalid user
	 * @throws UniversityException
	 */
	public boolean validate(String loginId,String pwd,String role) throws UniversityException;

	/**Accessed by committee to update a particular application 
	 * for an applicant to accept the application or reject the application
	 * @param appId
	 * @param status
	 * @throws UniversityException
	 */
	public void updateStatus(String appId,String status) throws UniversityException;
	
	/**
	 * Accessed by committee if an applicant are eligible then 
	 * schedule a interview
	 * update into the database for his interview
	 * @param appId
	 * @param intDate
	 * @throws UniversityException
	 */
	public void setInterview(String appId, Date intDate) throws UniversityException;
	
	/**Confirm the application if eligible and passed the interview
	 * accessed by the committee member
	 * @param apId
	 * @param confirm
	 * @return
	 * @throws UniversityException
	 */
	public int statusConfirm(String apId, String confirm) throws UniversityException;
	
	/**Insert a new participant into the database
	 * @param apId
	 * @throws UniversityException
	 */
	public void addParticipant(String apId) throws UniversityException;
	
	/**If a program is ended or something wrong happened
	 * delete the program.
	 * accessed by the admin
	 * @param pgrm
	 * @throws UniversityException
	 */
	public void deleteProgram(ProgramsOffered pgrm)  throws UniversityException;
	
	/**Add program on the recommendation of university 
	 * which the university wants admission for that year
	 * @param pgrm
	 * @throws UniversityException
	 */
	public void addProgram(ProgramsOffered pgrm) throws UniversityException;
	
	/**Insert a program scheduled to the database
	 * for which the applicant is going to attend
	 * @param ps
	 * @throws UniversityException
	 */
	public void addProgramSchedule(ProgramsScheduled ps) throws UniversityException;
	
	/**Delete a programScheduled if the applicabilty is 
	 * no longer needed
	 * @param ps
	 * @throws UniversityException
	 */
	public void deleteProgramSchedule(ProgramsScheduled ps) throws UniversityException;
	
	/**Get the list of application on the query related
	 * whether accepted or rejected depending on the query
	 * @param status
	 * @return
	 * @throws UniversityException
	 */
	public List<Application> getStatusApps(String status) throws UniversityException;
	
	/**Get the list of programScheduled in between dates
	 * accessed by committee and participant
	 * @param start
	 * @param end
	 * @return
	 * @throws UniversityException
	 */
	public List<ProgramsScheduled> listPrograms(Date start, Date end) throws UniversityException;

	//Validation of User Data entered
	boolean validateDetails(Application applicant) throws UniversityException;

}
